package com.org.question022;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

public class UglyNumbers {
	private final String inputFileName = "B-small-practice.in";
	private final String outputFileName = "B-small-practice.out";
	BufferedReader bufferedReader;
	BufferedWriter bufferedWriter;
	int count=0;
	
	UglyNumbers() {
		initializeFileReaders();
	}

	public void initializeFileReaders() {
		FileReader fileReader;
		try {
			fileReader = new FileReader(inputFileName);
			bufferedReader = new BufferedReader(fileReader);
			FileWriter fileWriter = new FileWriter(outputFileName);
			bufferedWriter = new BufferedWriter(fileWriter);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


	}

	public void solve() throws IOException {
		String line = bufferedReader.readLine();
		int n = Integer.parseInt(line);
		for(int i=0; i<n; i++) {
			System.out.println("Case No: " + (i+1));
			count=0;
			line = bufferedReader.readLine();
			int arraySize = line.length();
			long[] digits = new long[arraySize];
			for(int j=0; j< arraySize; j++) {
				digits[j] = (long)(line.charAt(j)-48);
			}
			Integer uglyCount = 0;
			if(arraySize==1) {
				if(digits[0]%2 ==0 || digits[0]%3==0 || digits[0]%5 ==0 || digits[0]%7==0) {
					uglyCount++;
					count++;
				}
			} else {
//				long[] digitsCopy;
//				if(arraySize>=2)
//					digitsCopy = Arrays.copyOfRange(digits, 0, arraySize-1);
//				else {
//					digitsCopy = null;
//				}
				countUglyNumbersRecursively(0L, digits, arraySize, 1, uglyCount);
			}
			appendOutputTofile(i+1, String.valueOf(count), bufferedWriter);
		}
		
	}
	
	private void countUglyNumbersRecursively(long countSoFar, long[] digits, int size, int lastElementPlaces,
			Integer uglyCount) {
		if(size <= 0 || digits == null) {
			if(countSoFar%2 ==0 || countSoFar%3==0 || countSoFar%5 ==0 || countSoFar%7==0) {
				uglyCount++;
				count++;
			}
			return;
		}
		
		long countUpdated=0;
		
		long[] digitsCopy;
		countUpdated = countSoFar + digits[size-1];
		if(size>=2)
			digitsCopy = Arrays.copyOfRange(digits, 0, size-1);
		else {
			digitsCopy = null;
		}
			
		countUglyNumbersRecursively(countUpdated, digitsCopy, size-1, 1, uglyCount);
		if(size==1)
			return;
		
		countUpdated = countSoFar - digits[size-1];
		if (size>=2)
			digitsCopy = Arrays.copyOfRange(digits, 0, size-1);
		else {
			digitsCopy = null;
		}
		countUglyNumbersRecursively(countUpdated, digitsCopy, size-1, 1, uglyCount);
		
		if (size>=2) {
			long[] digitsMerge = Arrays.copyOfRange(digits, 0, size-1);
			digitsMerge[size-2] = (long) (digitsMerge[size-2]*Math.pow(10,lastElementPlaces) + digits[size-1]);
			lastElementPlaces++;
			countUglyNumbersRecursively(countSoFar, digitsMerge, size-1, lastElementPlaces, uglyCount);
		}
	}

	public static void appendOutputTofile(int caseNumber, String output, BufferedWriter bufferedWriter) throws FileNotFoundException, IOException{
		bufferedWriter.write("Case #" + caseNumber + ": " + output);
		bufferedWriter.newLine();
		
	}
	
	public void close() throws IOException {
		bufferedReader.close();
		bufferedWriter.close();
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		UglyNumbers solution = new UglyNumbers();
		try {
			solution.solve();
			solution.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	

}
